Книга для почитать: https://free.oberon.org/files/Algoritmy_i_struktury_dannyh.pdf

Наследование в Python - это механизм, который позволяет классам наследовать свойства и методы от других классов. Класс, который наследует 
называется подклассом или производным классом, а класс, от которого он наследует, называется базовым классом или суперклассом.

EX. Реализация наследования классов


class Polygon:                              # Базовый класс
    def __init__(self, no_of_sides):
        self.n = no_of_sides
        self.sides = [0 for i in range(no_of_sides)]

    def inputSides(self):
        self.sides = [float(input("Введите сторону: "+str(i+1)+" : ")) for i in range(self.n)]

    def dispSides(self):
        for i in range(self.n):
            print("Сторона",i+1,"равна",self.sides[i])
            
class Triangle(Polygon):                    # Производный класс (подкласс)
    def __init__(self):
        Polygon.__init__(self, 3)

    def findArea(self):
        a, b, c = self.sides
        s = (a + b + c) / 2
        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5
        print('Площадь треугольника{}'.format(area))

t = Triangle()
t.inputSides()
t.dispSides()
t.findArea()

Результат:
Введите сторону: 1 : 4
Введите сторону: 2 : 6
Введите сторону: 3 : 9
Сторона 1 равна 4.0
Сторона 2 равна 6.0
Сторона 3 равна 9.0
Площадь треугольника 9.56229574945264

Функция super() - Конструкция super() в Python позволяет вызвать методы базового класса из подкласса. Она принимает два необязательных 
параметра:
type - это параметр, который указывает класс, в котором нужно найти метод. Если этот параметр не указан, то Python использует тип 
текущего объекта.
object - это параметр, который указывает объект или класс, в контексте которого будет производиться поиск метода. Если этот параметр не 
указан, то Python использует self (текущий экземпляр класса).

Так выше строчку 'Polygon.__init__(self, 3)' можно заменить 'super().__init__(3)'

EX. Пример использования super() без параметров

class BaseClass:
    def some_method(self):
        print('Метод из базового класса')

class SubClass(BaseClass):
    def some_method(self):
        super().some_method()
        print('Метод из подкласса')

instance = SubClass()
instance.some_method()

Результат:
Метод из базового класса
Метод из подкласса

Теперь пример с заданием параметров
EX.

class BaseClass:
    def some_method(self):
        print('Метод из базового класса')

class SubClass(BaseClass):
    def some_method(self):
        super(SubClass, self).some_method()
        print('Метод из подкласса')

instance = SubClass()
instance.some_method()

Результат:
Метод из базового класса
Метод из подкласса

super(SubClass, self).some_method() 
В этой строчке мы явно указываем тип SubClass в качестве первого параметра функции super(). Таким образом, мы говорим Python искать 
метод some_method() в классе SubClass, а не в текущем объекте.
второй параметр self в функции super(SubClass, self).some_method() представляет текущий объект экземпляра класса SubClass, который будет использоваться в качестве контекста при вызове метода some_method() из базового класса.

При вызове метода через super(), метод будет вызываться в контексте, который передается в качестве второго аргумента 
(в данном случае self). Это означает, что при вызове super(SubClass, self).some_method() метод some_method() будет вызван из класса, 
указанного в первом параметре (SubClass), но в контексте текущего объекта (self) экземпляра SubClass.


